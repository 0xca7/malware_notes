#!/usr/bin/env python
# coding: utf-8

# In[1]:


"""
deobfuscate strings in blob of text using the offsets given
by the string deobfuscation functions in malware.
0xca7
"""


# In[2]:


offsets = [
    (0, 0, 217), (1, 217, 63), (2, 280, 60), (3, 340, 58), (4, 398, 64), (5, 462, 52), (6, 514, 24), (7, 538, 11), (8, 549, 51), (9, 600, 9), (10, 609, 14), (11, 623, 0), (12, 623, 104), (13, 727, 6), (14, 733, 10), (15, 743, 6), (16, 749, 10), (17, 759, 7), (18, 766, 11), (19, 777, 5), (20, 782, 9), (21, 791, 6), (22, 797, 8), (23, 805, 3), (24, 808, 20), (25, 828, 21), (26, 849, 10), (27, 859, 24), (28, 883, 5), (29, 888, 36), (30, 924, 2), (31, 926, 5), (32, 931, 16), (33, 947, 20), (34, 967, 16), (35, 983, 36), (36, 1019, 45), (37, 1064, 11), (38, 1075, 1), (39, 1076, 4), (40, 1080, 20), (41, 1100, 16), (42, 1116, 128), (43, 1244, 128), (44, 1372, 172), (45, 1544, 124), (46, 1668, 24), (47, 1692, 16), (48, 1708, 16), (49, 1724, 20), (50, 1744, 20), (51, 1764, 24), (52, 1788, 20), (53, 1808, 16), (54, 1824, 16), (55, 1840, 20), (56, 1860, 8), (57, 1868, 12), (58, 1880, 20), (59, 1900, 12), (60, 1912, 12), (61, 1924, 24), (62, 1948, 20), (63, 1968, 12), (64, 1980, 20), (65, 2000, 20), (66, 2020, 20), (67, 2040, 24), (68, 2064, 20), (69, 2084, 20), (70, 2104, 20), (71, 2124, 20), (72, 2144, 24), (73, 2168, 20), (74, 2188, 20), (75, 2208, 2), (76, 2210, 12), (77, 2222, 1), (78, 2223, 2), (79, 2225, 10), (80, 2235, 4), (81, 2239, 58), (82, 2297, 72), (83, 2369, 88), (84, 2457, 28), (85, 2485, 36), (86, 2521, 44), (87, 2565, 24), (88, 2589, 60), (89, 2649, 44), (90, 2693, 24), (91, 2717, 48), (92, 2765, 28), (93, 2793, 24), (94, 2817, 32), (95, 2849, 28), (96, 2877, 28), (97, 2905, 28), (98, 2933, 40), (99, 2973, 44), (100, 3017, 40), (101, 3057, 76), (102, 3133, 48), (103, 3181, 36), (104, 3217, 28), (105, 3245, 28), (106, 3273, 28), (107, 3301, 36), (108, 3337, 32), (109, 3369, 24), (110, 3393, 28), (111, 3421, 44), (112, 3465, 28), (113, 3493, 28), (114, 3521, 40), (115, 3561, 28), (116, 3589, 40), (117, 3629, 24), (118, 3653, 28), (119, 3681, 40), (120, 3721, 56), (121, 3777, 1), (122, 3778, 6), (123, 3784, 4), (124, 3788, 43), (125, 3831, 11), (126, 3842, 22), (127, 3864, 62), (128, 3926, 51), (129, 3977, 50), (130, 4027, 64), (131, 4091, 120), (132, 4211, 52), (133, 4263, 65), (134, 4328, 54), (135, 4382, 12), (136, 4394, 15), (137, 4409, 13), (138, 4422, 12), (139, 4434, 11), (140, 4445, 3), (141, 4448, 28), (142, 4476, 32), (143, 4508, 2), (144, 4510, 3), (145, 4513, 5), (146, 4518, 5), (147, 4523, 173), (148, 4696, 8), (149, 4704, 4), (150, 4708, 11), (151, 4719, 3), (152, 4722, 1), (153, 4723, 33), (154, 4756, 7), (155, 4763, 1), (156, 4764, 9), (157, 4773, 3), (158, 4776, 11), (159, 4787, 2), (160, 4789, 10), (161, 4799, 2), (162, 4801, 10), (163, 4811, 2), (164, 4813, 10), (165, 4823, 1), (166, 4824, 9), (167, 4833, 6), (168, 4839, 7), (169, 4846, 14), (170, 4860, 35), (171, 4895, 7), (172, 4902, 19), (173, 4921, 20), (174, 4941, 30), (175, 4971, 11), (176, 4982, 32), (177, 5014, 7), (178, 5021, 26), (179, 5047, 7), (180, 5054, 10), (181, 5064, 7), (182, 5071, 10), (183, 5081, 10), (184, 5091, 7), (185, 5098, 10), (186, 5108, 10), (187, 5118, 7), (188, 5125, 6), (189, 5131, 6), (190, 5137, 4), (191, 5141, 1), (192, 5142, 8), (193, 5150, 12), (194, 5162, 8), (195, 5170, 5), (196, 5175, 6), (197, 5181, 3), (198, 5184, 32), (199, 5216, 28), (200, 5244, 3), (201, 5247, 32), (202, 5279, 28), (203, 5307, 12), (204, 5319, 16), (205, 5335, 1), (206, 5336, 8), (207, 5344, 8), (208, 5352, 100), (209, 5452, 44), (210, 5496, 48), (211, 5544, 32), (212, 5576, 12), (213, 5588, 3), (214, 5591, 12), (215, 5603, 16), (216, 5619, 20), (217, 5639, 13), (218, 5652, 8), (219, 5660, 8), (220, 5668, 8), (221, 5676, 8), (222, 5684, 6), (223, 5690, 6), (224, 5696, 7), (225, 5703, 5), (226, 5708, 36), (227, 5744, 16), (228, 5760, 32), (229, 5792, 16), (230, 5808, 48), (231, 5856, 10), (232, 5866, 7), (233, 5873, 7), (234, 5880, 24), (235, 5904, 28), (236, 5932, 12), (237, 5944, 8), (238, 5952, 28), (239, 5980, 16), (240, 5996, 32), (241, 6028, 24), (242, 6052, 36), (243, 6088, 24), (244, 6112, 48), (245, 6160, 16), (246, 6176, 32), (247, 6208, 20), (248, 6228, 8), (249, 6236, 2), (250, 6238, 2), (251, 6240, 16), (252, 6256, 2), (253, 6258, 12), (254, 6270, 9), (255, 6279, 32), (256, 6311, 16), (257, 6327, 16), (258, 6343, 8), (259, 6351, 16), (260, 6367, 12), (261, 6379, 16), (262, 6395, 16), (263, 6411, 24), (264, 6435, 44), (265, 6479, 44), (266, 6523, 20), (267, 6543, 8), (268, 6551, 36), (269, 6587, 20), (270, 6607, 8), (271, 6615, 12), (272, 6627, 20), (273, 6647, 20), (274, 6667, 24), (275, 6691, 12), (276, 6703, 3), (277, 6706, 16), (278, 6722, 12), (279, 6734, 8), (280, 6742, 12), (281, 6754, 8), (282, 6762, 12), (283, 6774, 8), (284, 6782, 76), (285, 6858, 8), (286, 6866, 32), (287, 6898, 12), (288, 6910, 28), (289, 6938, 12), (290, 6950, 28), (291, 6978, 16), (292, 6994, 44), (293, 7038, 8), (294, 7046, 44), (295, 7090, 4), (296, 7094, 40), (297, 7134, 12), (298, 7146, 44), (299, 7190, 12), (300, 7202, 28), (301, 7230, 8), (302, 7238, 44), (303, 7282, 24), (304, 7306, 60), (305, 7366, 16), (306, 7382, 52), (307, 7434, 12), (308, 7446, 8), (309, 7454, 8), (310, 7462, 8), (311, 7470, 36), (312, 7506, 20), (313, 7526, 23), (314, 7549, 3), (315, 7552, 3), (316, 7555, 5), (317, 7560, 20), (318, 7580, 16), (319, 7596, 16), (320, 7612, 12), (321, 7624, 20), (322, 7644, 20), (323, 7664, 20), (324, 7684, 20), (325, 7704, 22), (326, 7726, 12), (327, 7738, 14), (328, 7752, 49), (329, 7801, 8), (330, 7809, 13), (331, 7822, 24), (332, 7846, 3), (333, 7849, 17), (334, 7866, 7), (335, 7873, 44), (336, 7917, 43), (337, 7960, 2), (338, 7962, 12), (339, 7974, 84), (340, 8058, 68), (341, 8126, 40), (342, 8166, 72), (343, 8238, 24), (344, 8262, 48), (345, 8310, 76), (346, 8386, 80), (347, 8466, 32), (348, 8498, 59), (349, 8557, 24), (350, 8581, 48), (351, 8629, 48), (352, 8677, 12), (353, 8689, 16), (354, 8705, 17), (355, 8722, 76), (356, 8798, 80), (357, 8878, 68), (358, 8946, 12), (359, 8958, 9), (360, 8967, 4), (361, 8971, 8), (362, 8979, 5), (363, 8984, 4), (364, 8988, 8), (365, 8996, 12), (366, 9008, 44), (367, 9052, 8), (368, 9060, 44), (369, 9104, 12), (370, 9116, 32), (371, 9148, 24), (372, 9172, 132), (373, 9304, 20), (374, 9324, 132), (375, 9456, 24), (376, 9480, 132), (377, 9612, 16), (378, 9628, 132), (379, 9760, 20), (380, 9780, 132), (381, 9912, 20), (382, 9932, 132), (383, 10064, 20), (384, 10084, 132), (385, 10216, 20), (386, 10236, 132), (387, 10368, 20), (388, 10388, 132), (389, 10520, 32), (390, 10552, 132), (391, 10684, 20), (392, 10704, 16), (393, 10720, 124), (394, 10844, 12), (395, 10856, 124), (396, 10980, 20), (397, 11000, 124), (398, 11124, 12), (399, 11136, 124), (400, 11260, 16), (401, 11276, 124), (402, 11400, 16), (403, 11416, 124), (404, 11540, 16), (405, 11556, 124), (406, 11680, 16), (407, 11696, 124), (408, 11820, 16), (409, 11836, 124), (410, 11960, 24), (411, 11984, 124), (412, 12108, 12), (413, 12120, 124), (414, 12244, 20), (415, 12264, 124), (416, 12388, 20), (417, 12408, 124), (418, 12532, 20), (419, 12552, 124), (420, 12676, 16), (421, 12692, 124), (422, 12816, 16), (423, 12832, 124), (424, 12956, 20), (425, 12976, 124), (426, 13100, 16), (427, 13116, 124), (428, 13240, 16), (429, 13256, 124), (430, 13380, 20), (431, 13400, 124), (432, 13524, 16), (433, 13540, 124), (434, 13664, 20), (435, 13684, 124), (436, 13808, 16), (437, 13824, 124), (438, 13948, 20), (439, 13968, 20), (440, 13988, 124), (441, 14112, 16), (442, 14128, 124), (443, 14252, 20), (444, 14272, 124), (445, 14396, 16), (446, 14412, 124), (447, 14536, 20), (448, 14556, 124), (449, 14680, 16), (450, 14696, 124), (451, 14820, 20), (452, 14840, 124), (453, 14964, 20), (454, 14984, 124), (455, 15108, 16), (456, 15124, 124), (457, 15248, 24), (458, 15272, 124), (459, 15396, 16), (460, 15412, 12), (461, 15424, 12), (462, 15436, 12), (463, 15448, 16), (464, 15464, 11), (465, 15475, 19), (466, 15494, 42), (467, 15536, 7), (468, 15543, 30), (469, 15573, 9), (470, 15582, 32), (471, 15614, 32), (472, 15646, 15), (473, 15661, 38), (474, 15699, 18), (475, 15717, 41), (476, 15758, 16), (477, 15774, 16), (478, 15790, 12), (479, 15802, 16), (480, 15818, 20), (481, 15838, 20), (482, 15858, 28), (483, 15886, 20), (484, 15906, 10), (485, 15916, 11), (486, 15927, 11), (487, 15938, 14), (488, 15952, 12), 
]


# In[3]:


# extractbytes.txt is the hexdump written to a file
with open('data/extractbytes.txt', 'r') as fp:

    # read all bytes 
    content = fp.read()
    # remove whitespaces
    content = content.replace(' ', '')
    # convert the bytearray
    bcontent = bytearray.fromhex(content)

    # decrypt just like in the malware
    i = 0
    decrypted = bytearray()
    for b in bcontent:
        dec = (b ^ i ^ 170) & 0xff
        decrypted.append(dec)
        i += 1

    fp.close()
    


# In[4]:


# decode all the strings in the malware.
results = []
for offset in offsets:
    if offset[0] != 0:
        start_offset = offset[1]
        string_len = offset[2]
        end_offset = start_offset + string_len
        temp = '{} ({} - {}): '.format(offset[0], start_offset, end_offset)
        blob = decrypted[start_offset:end_offset]
        blob = blob.decode('utf-8')
        temp += blob
        results.append(blob)
    else:
        temp = '{} ({} - {}): '.format(offset[0], offset[1], offset[2])
        blob = decrypted[0:offset[2]]
        blob = blob.decode('utf-8')
        temp += blob
        results.append(blob)

i = 0
for result in results:
    print('{} = {}'.format(i, result))
    i += 1


# In[5]:


# write results out to file
with open('raw_decoded_strings.txt', 'w') as fp:
    for result in results:
        fp.write(result + '\n')
    fp.close


# In[6]:


# now we can decode everything that is base64 encoded.
# for that we search for all strings ending in "=". this may
# fail, but still, it's something of an automation
import base64
import binascii
import os

decoded_result = []

# try to decode all strings
for result in results:
    try:
        res = str(base64.b64decode(result)).strip('b')[1:-1]
        decoded_result.append(res)
    except binascii.Error:
        decoded_result.append(result)


# In[7]:


num_strings = 0
with open('full_decoded_strings.txt', 'w') as fp:
    for result in decoded_result:
        fp.write(result +'\n')
        num_strings += 1
    fp.close()
print('wrote {} decoded strings to file'.format(num_strings))


# In[8]:


# write number before each string for identification
num_strings = 0
with open('numbered_decoded_strings.txt', 'w') as fp:
    for result in decoded_result:
        fp.write(str(num_strings) + ': ' + result +'\n')
        num_strings += 1
    fp.close()
print('wrote {} decoded strings to file'.format(num_strings))


# In[ ]:





# In[ ]:





# In[ ]:




